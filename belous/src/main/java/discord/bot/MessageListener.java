package discord.bot;

import net.dv8tion.jda.api.events.message.MessageReceivedEvent;
import net.dv8tion.jda.api.hooks.ListenerAdapter;
import net.dv8tion.jda.api.utils.FileUpload;

import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.ArrayList;
import org.json.JSONObject;
import java.util.Random;

import net.dv8tion.jda.api.entities.emoji.Emoji;

public class MessageListener extends ListenerAdapter {
    @Override
    public void onMessageReceived(MessageReceivedEvent event){
        if(event.getAuthor().isBot()) return;
        
        String denchickId = "469452560529358850";
        String myId = "648774699656019969";
        Random rnd = new Random();
        ArrayList<String> denchiks = new ArrayList<>();
        denchiks.add("images/denchik.png");
        denchiks.add("images/denchik1.png");
        denchiks.add("images/denchik2.png");
        denchiks.add("images/denchik3.png");

        String content = event.getMessage().getContentRaw().toLowerCase(); //–ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        if(content.equals("!ping")){
            event.getChannel().sendMessage("–ó–∞–µ–±–∏—Å—å –±—Ä–æ, –ø–æ—à–µ–ª —Ç—ã –Ω–∞—Ö—É–π").queue(); //–∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–∫–ª–∏–∫–∞ –±–æ—Ç–∞
        }
        //–µ—â–µ –∫–æ–º–∞–Ω–¥–∞ 
        if(content.contains("–ø—Ä–∏–≤–µ—Ç") || content.contains("–∑–¥–∞—Ä–æ–≤–∞")){
            event.getChannel().sendMessage("–ü—Ä–∏–≤–µ—Ç –¥–æ–ª–±–∞–µ–± –ø–æ –∏–º–µ–Ω–∏ " + event.getAuthor().getName()).queue(null, Throwable::printStackTrace);
        }
        if(content.contains("–¥–µ–Ω") || content.contains("den") || content.contains("–±–µ–∑ –¥")){
            event.getMessage().addReaction(Emoji.fromUnicode("üêñ")).queue();
            event.getChannel().sendMessage("–ê–ª—ë—É —à–µ—Ñ, –≤–∞—Å –≤—ã–∑—ã–≤–∞—é—Ç " + "<@" + "469452560529358850" + ">" ).queue();
        }
        if(content.contains("–∏–¥–∏ –Ω–∞—Ö—É–π")){
            event.getChannel().sendMessage("–¢—ã –∫–æ –º–Ω–µ –≤ –º–∞—à–∏–Ω—É –Ω–µ —Å–∞–¥–∏—à—å—Å—è —á–º–æ").queue();
        }
        if(content.contains("–æ—Ö—Ä–∞–Ω–∞ —Ç—Ä—É–¥–∞") || content.contains("rock n roll") || content.contains("—Ñ—É–ª–ª")){
            String picked = denchiks.get(rnd.nextInt(denchiks.size()));
            File file = new File(picked);
            if(file.exists()){
                event.getMessage().replyFiles(FileUpload.fromData(file)).queue();
            }
            else{
                event.getMessage().reply("–ö—Ç–æ –±—ã —á—Ç–æ –Ω–µ –≥–æ–≤–æ—Ä–∏–ª, –Ω–æ –¥–µ–Ω—á–∏–∫ —Ä–µ–∞–ª—å–Ω–æ –∫—Ä–∞—Å–∞–≤—á–∏–∫").queue();
            }
        }

        //–≥–µ–Ω–µ—Ä–∏—Ä—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ —Å –ø–æ–æ–º–æ—â—å—é –º–æ–¥–µ–ª–∏ —è –ø—å—è–Ω—ã–π –µ—Å–ª–∏ —á–æ
        if(event.getAuthor().getId().equals(myId)){
            try{
                String response = sendPromptToModel(content);
                event.getMessage().reply(response).queue();
            }
            catch (Exception e){
                event.getChannel().sendMessage("–û—à–∏–±–∫–∞ –±–æ–±").queue();
            }
        }

    }

    private String sendPromptToModel(String prompt) throws IOException {
        URL url = new URL("http://localhost:5000/generate");
        HttpURLConnection con = (HttpURLConnection) url.openConnection();
        con.setRequestMethod("POST");
        con.setDoOutput(true);
        con.setRequestProperty("Content-Type", "application/json");
    
        int words = Math.min(20, prompt.split("\\s+").length);
            JSONObject jsonRequest = new JSONObject();
        jsonRequest.put("prompt", prompt);
        jsonRequest.put("words", words);
    
        try (OutputStream os = con.getOutputStream()) {
            byte[] input = jsonRequest.toString().getBytes("utf-8");
            os.write(input, 0, input.length);
        }
    
        StringBuilder response = new StringBuilder();
        try (BufferedReader br = new BufferedReader(new InputStreamReader(con.getInputStream(), "utf-8"))) {
            String responseLine;
            while ((responseLine = br.readLine()) != null) {
                response.append(responseLine.trim());
            }
        }
        JSONObject jsonResponse = new JSONObject(response.toString());
        return jsonResponse.getString("response");
    }
    
}
